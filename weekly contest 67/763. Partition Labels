763. Partition Labels My SubmissionsBack to Contest
User Accepted: 1077
User Tried: 1143
Total Accepted: 1107
Total Submissions: 1686
Difficulty: Medium
A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:
Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
Note:

S will have length in range [1, 500].
S will consist of lowercase letters ('a' to 'z') only.

class Solution {
    public List<Integer> partitionLabels(String S) {
        List<Integer> res = new ArrayList<>();
        if (S == null || S.length() == 0) {
            return res;
        }
        int[] map = new int[26];
        int left = 0, right = 0, last = 0;
        for (int i = 0; i < S.length(); i++) {
            map[S.charAt(i) - 'a'] = i;
        }
        while (left < S.length()) {
            if (map[S.charAt(left) - 'a'] > right) {
                right = map[S.charAt(left) - 'a'];
            }
            if (left == right) {
                res.add(right - last + 1);
                last = right + 1;
            }
            left++;
        }
        return res;
    }
}