765. Couples Holding Hands My SubmissionsBack to Contest
User Accepted: 143
User Tried: 207
Total Accepted: 143
Total Submissions: 368
Difficulty: Hard
N couples sit in 2N seats arranged in a row and want to hold hands. We want to know the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.

The people and seats are represented by an integer from 0 to 2N-1, the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2N-2, 2N-1).

The couples' initial seating is given by row[i] being the value of the person who is initially sitting in the i-th seat.

Example 1:

Input: row = [0, 2, 1, 3]
Output: 1
Explanation: We only need to swap the second (row[1]) and third (row[2]) person.
Example 2:

Input: row = [3, 2, 0, 1]
Output: 0
Explanation: All couples are already seated side by side.
Note:

len(row) is even and in the range of [4, 60].
row is guaranteed to be a permutation of 0...len(row)-1




// Greedy method, need a prove of the correctness
// Time complexity: O(n), space complexity: O(n)
class Solution {
    public int minSwapsCouples(int[] row) {
        int count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < row.length; i++) {
            map.put(row[i], i);
        }
        for (int i = 0; i < row.length; i = i + 2) {
            if (row[i] / 2 != row[i + 1] / 2) {
                int correct_seat = row[i] % 2 == 0 ? row[i] + 1 : row[i] - 1;
                int other_guy = map.get(correct_seat);
                swap(row, map, i + 1, other_guy);
                count++;
            }
        }
        return count;
    }
    
    private void swap(int[] row, Map<Integer, Integer> map, int i, int j) {
        int temp = row[i];
        row[i] = row[j];
        row[j] = temp;
        map.put(row[i], i);
        map.put(row[j], j);
    }
}