768. Max Chunks To Make Sorted II My SubmissionsBack to Contest
User Accepted: 431
User Tried: 570
Total Accepted: 438
Total Submissions: 1053
Difficulty: Hard
This question is the same as "Max Chunks to Make Sorted" except the integers of the given array are not necessarily distinct, the input array could be up to length 2000, and the elements could be up to 10**8.

Given an array arr of integers (not necessarily distinct), we split the array into some number of "chunks" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?

Example 1:

Input: arr = [5,4,3,2,1]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.

Example 2:

Input: arr = [2,1,3,4,4]
Output: 4
Explanation:
We can split into two chunks, such as [2, 1], [3, 4, 4].
However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.
Note:

arr will have length in range [1, 2000].
arr[i] will be an integer in range [0, 10**8].

class Solution {
    //take 1: tricky method, O(1) space, O(n) time
    /*
    public int maxChunksToSorted(int[] arr) {
        if (arr == null || arr.length == 0) {
            return -1;
        }
        int max = 0, count = 0;
        for (int i = 0; i < arr.length; i++) {
            max = Math.max(max, arr[i]);
            if (max == i) {
                count++;
            }
        }
        return count;
    }
    */
    
    // take 2: left max & right min, O(n) space, O(n) time, also can be applied to #770
    public int maxChunksToSorted(int[] arr) {
        if (arr == null || arr.length == 0) {
            return -1;
        }
        int[] left = new int[arr.length];
        int[] right = new int[arr.length];
        
        int count = 0;
        left[0] = arr[0];
        for (int i = 1; i < arr.length; i++) {	// left max array
            left[i] = Math.max(left[i - 1], arr[i]);
        }
        right[right.length - 1] = arr[arr.length - 1];
        for (int i = arr.length - 2; i >= 0; i--) {		// right min array
            right[i] = Math.min(right[i + 1], arr[i]);
        }
        for (int i = 0; i < arr.length - 1; i++) {
            if (left[i] <= right[i + 1]) {			// while the left max <= right min
                count++;
            }
        }
        return count + 1;
    }
}